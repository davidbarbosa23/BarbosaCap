{"version":3,"sources":["assets/img/BarbosaCap_Logo.svg","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../../src/index.ts","components/Layouts/modules/Navbar.tsx","components/Layouts/modules/Header.tsx","components/Layouts/modules/Footer.tsx","components/Layouts/AppLayout.tsx","components/NotFound/index.tsx"],"names":["module","exports","_arrayLikeToArray","arr","len","length","i","arr2","Array","_slicedToArray","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","err","o","minLen","n","prototype","toString","call","slice","constructor","name","from","test","TypeError","parse","str","options","tokens","char","type","index","count","pattern","j","code","charCodeAt","lexer","prefixes","defaultPattern","escapeString","delimiter","result","key","path","tryConsume","mustConsume","nextType","consumeText","prefix","indexOf","suffix","modifier","compile","reFlags","flags","encode","x","validate","matches","map","token","RegExp","data","optional","repeat","segment","typeOfMessage","String","tokensToFunction","replace","sensitive","stringToRegexp","keys","strict","start","end","endsWith","route","mod","endToken","isEndDelimited","tokensToRegexp","pathToRegexp","groupsRegex","execResult","exec","source","regexpToRegexp","paths","parts","join","arrayToRegexp","LangSelector","location","useLocation","className","entries","AppLangs","to","langUrl","pathname","locale","definePath","routeComponents","subPaths","split","Navbar","t","useTranslation","Header","src","Logo","alt","Footer","AppLayout","children","NotFound"],"mappings":"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","file":"static/js/4.430a67b5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/BarbosaCap_Logo.a5065d2a.svg\";","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","/**\n * Tokenizer results.\n */\ninterface LexToken {\n  type:\n    | \"OPEN\"\n    | \"CLOSE\"\n    | \"PATTERN\"\n    | \"NAME\"\n    | \"CHAR\"\n    | \"ESCAPED_CHAR\"\n    | \"MODIFIER\"\n    | \"END\";\n  index: number;\n  value: string;\n}\n\n/**\n * Tokenize input string.\n */\nfunction lexer(str: string): LexToken[] {\n  const tokens: LexToken[] = [];\n  let i = 0;\n\n  while (i < str.length) {\n    const char = str[i];\n\n    if (char === \"*\" || char === \"+\" || char === \"?\") {\n      tokens.push({ type: \"MODIFIER\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"\\\\\") {\n      tokens.push({ type: \"ESCAPED_CHAR\", index: i++, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"{\") {\n      tokens.push({ type: \"OPEN\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"}\") {\n      tokens.push({ type: \"CLOSE\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \":\") {\n      let name = \"\";\n      let j = i + 1;\n\n      while (j < str.length) {\n        const code = str.charCodeAt(j);\n\n        if (\n          // `0-9`\n          (code >= 48 && code <= 57) ||\n          // `A-Z`\n          (code >= 65 && code <= 90) ||\n          // `a-z`\n          (code >= 97 && code <= 122) ||\n          // `_`\n          code === 95\n        ) {\n          name += str[j++];\n          continue;\n        }\n\n        break;\n      }\n\n      if (!name) throw new TypeError(`Missing parameter name at ${i}`);\n\n      tokens.push({ type: \"NAME\", index: i, value: name });\n      i = j;\n      continue;\n    }\n\n    if (char === \"(\") {\n      let count = 1;\n      let pattern = \"\";\n      let j = i + 1;\n\n      if (str[j] === \"?\") {\n        throw new TypeError(`Pattern cannot start with \"?\" at ${j}`);\n      }\n\n      while (j < str.length) {\n        if (str[j] === \"\\\\\") {\n          pattern += str[j++] + str[j++];\n          continue;\n        }\n\n        if (str[j] === \")\") {\n          count--;\n          if (count === 0) {\n            j++;\n            break;\n          }\n        } else if (str[j] === \"(\") {\n          count++;\n          if (str[j + 1] !== \"?\") {\n            throw new TypeError(`Capturing groups are not allowed at ${j}`);\n          }\n        }\n\n        pattern += str[j++];\n      }\n\n      if (count) throw new TypeError(`Unbalanced pattern at ${i}`);\n      if (!pattern) throw new TypeError(`Missing pattern at ${i}`);\n\n      tokens.push({ type: \"PATTERN\", index: i, value: pattern });\n      i = j;\n      continue;\n    }\n\n    tokens.push({ type: \"CHAR\", index: i, value: str[i++] });\n  }\n\n  tokens.push({ type: \"END\", index: i, value: \"\" });\n\n  return tokens;\n}\n\nexport interface ParseOptions {\n  /**\n   * Set the default delimiter for repeat parameters. (default: `'/'`)\n   */\n  delimiter?: string;\n  /**\n   * List of characters to automatically consider prefixes when parsing.\n   */\n  prefixes?: string;\n}\n\n/**\n * Parse a string for the raw tokens.\n */\nexport function parse(str: string, options: ParseOptions = {}): Token[] {\n  const tokens = lexer(str);\n  const { prefixes = \"./\" } = options;\n  const defaultPattern = `[^${escapeString(options.delimiter || \"/#?\")}]+?`;\n  const result: Token[] = [];\n  let key = 0;\n  let i = 0;\n  let path = \"\";\n\n  const tryConsume = (type: LexToken[\"type\"]): string | undefined => {\n    if (i < tokens.length && tokens[i].type === type) return tokens[i++].value;\n  };\n\n  const mustConsume = (type: LexToken[\"type\"]): string => {\n    const value = tryConsume(type);\n    if (value !== undefined) return value;\n    const { type: nextType, index } = tokens[i];\n    throw new TypeError(`Unexpected ${nextType} at ${index}, expected ${type}`);\n  };\n\n  const consumeText = (): string => {\n    let result = \"\";\n    let value: string | undefined;\n    // tslint:disable-next-line\n    while ((value = tryConsume(\"CHAR\") || tryConsume(\"ESCAPED_CHAR\"))) {\n      result += value;\n    }\n    return result;\n  };\n\n  while (i < tokens.length) {\n    const char = tryConsume(\"CHAR\");\n    const name = tryConsume(\"NAME\");\n    const pattern = tryConsume(\"PATTERN\");\n\n    if (name || pattern) {\n      let prefix = char || \"\";\n\n      if (prefixes.indexOf(prefix) === -1) {\n        path += prefix;\n        prefix = \"\";\n      }\n\n      if (path) {\n        result.push(path);\n        path = \"\";\n      }\n\n      result.push({\n        name: name || key++,\n        prefix,\n        suffix: \"\",\n        pattern: pattern || defaultPattern,\n        modifier: tryConsume(\"MODIFIER\") || \"\"\n      });\n      continue;\n    }\n\n    const value = char || tryConsume(\"ESCAPED_CHAR\");\n    if (value) {\n      path += value;\n      continue;\n    }\n\n    if (path) {\n      result.push(path);\n      path = \"\";\n    }\n\n    const open = tryConsume(\"OPEN\");\n    if (open) {\n      const prefix = consumeText();\n      const name = tryConsume(\"NAME\") || \"\";\n      const pattern = tryConsume(\"PATTERN\") || \"\";\n      const suffix = consumeText();\n\n      mustConsume(\"CLOSE\");\n\n      result.push({\n        name: name || (pattern ? key++ : \"\"),\n        pattern: name && !pattern ? defaultPattern : pattern,\n        prefix,\n        suffix,\n        modifier: tryConsume(\"MODIFIER\") || \"\"\n      });\n      continue;\n    }\n\n    mustConsume(\"END\");\n  }\n\n  return result;\n}\n\nexport interface TokensToFunctionOptions {\n  /**\n   * When `true` the regexp will be case sensitive. (default: `false`)\n   */\n  sensitive?: boolean;\n  /**\n   * Function for encoding input strings for output.\n   */\n  encode?: (value: string, token: Key) => string;\n  /**\n   * When `false` the function can produce an invalid (unmatched) path. (default: `true`)\n   */\n  validate?: boolean;\n}\n\n/**\n * Compile a string to a template function for the path.\n */\nexport function compile<P extends object = object>(\n  str: string,\n  options?: ParseOptions & TokensToFunctionOptions\n) {\n  return tokensToFunction<P>(parse(str, options), options);\n}\n\nexport type PathFunction<P extends object = object> = (data?: P) => string;\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nexport function tokensToFunction<P extends object = object>(\n  tokens: Token[],\n  options: TokensToFunctionOptions = {}\n): PathFunction<P> {\n  const reFlags = flags(options);\n  const { encode = (x: string) => x, validate = true } = options;\n\n  // Compile all the tokens into regexps.\n  const matches = tokens.map(token => {\n    if (typeof token === \"object\") {\n      return new RegExp(`^(?:${token.pattern})$`, reFlags);\n    }\n  });\n\n  return (data: Record<string, any> | null | undefined) => {\n    let path = \"\";\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n\n      if (typeof token === \"string\") {\n        path += token;\n        continue;\n      }\n\n      const value = data ? data[token.name] : undefined;\n      const optional = token.modifier === \"?\" || token.modifier === \"*\";\n      const repeat = token.modifier === \"*\" || token.modifier === \"+\";\n\n      if (Array.isArray(value)) {\n        if (!repeat) {\n          throw new TypeError(\n            `Expected \"${token.name}\" to not repeat, but got an array`\n          );\n        }\n\n        if (value.length === 0) {\n          if (optional) continue;\n\n          throw new TypeError(`Expected \"${token.name}\" to not be empty`);\n        }\n\n        for (let j = 0; j < value.length; j++) {\n          const segment = encode(value[j], token);\n\n          if (validate && !(matches[i] as RegExp).test(segment)) {\n            throw new TypeError(\n              `Expected all \"${token.name}\" to match \"${token.pattern}\", but got \"${segment}\"`\n            );\n          }\n\n          path += token.prefix + segment + token.suffix;\n        }\n\n        continue;\n      }\n\n      if (typeof value === \"string\" || typeof value === \"number\") {\n        const segment = encode(String(value), token);\n\n        if (validate && !(matches[i] as RegExp).test(segment)) {\n          throw new TypeError(\n            `Expected \"${token.name}\" to match \"${token.pattern}\", but got \"${segment}\"`\n          );\n        }\n\n        path += token.prefix + segment + token.suffix;\n        continue;\n      }\n\n      if (optional) continue;\n\n      const typeOfMessage = repeat ? \"an array\" : \"a string\";\n      throw new TypeError(`Expected \"${token.name}\" to be ${typeOfMessage}`);\n    }\n\n    return path;\n  };\n}\n\nexport interface RegexpToFunctionOptions {\n  /**\n   * Function for decoding strings for params.\n   */\n  decode?: (value: string, token: Key) => string;\n}\n\n/**\n * A match result contains data about the path match.\n */\nexport interface MatchResult<P extends object = object> {\n  path: string;\n  index: number;\n  params: P;\n}\n\n/**\n * A match is either `false` (no match) or a match result.\n */\nexport type Match<P extends object = object> = false | MatchResult<P>;\n\n/**\n * The match function takes a string and returns whether it matched the path.\n */\nexport type MatchFunction<P extends object = object> = (\n  path: string\n) => Match<P>;\n\n/**\n * Create path match function from `path-to-regexp` spec.\n */\nexport function match<P extends object = object>(\n  str: Path,\n  options?: ParseOptions & TokensToRegexpOptions & RegexpToFunctionOptions\n) {\n  const keys: Key[] = [];\n  const re = pathToRegexp(str, keys, options);\n  return regexpToFunction<P>(re, keys, options);\n}\n\n/**\n * Create a path match function from `path-to-regexp` output.\n */\nexport function regexpToFunction<P extends object = object>(\n  re: RegExp,\n  keys: Key[],\n  options: RegexpToFunctionOptions = {}\n): MatchFunction<P> {\n  const { decode = (x: string) => x } = options;\n\n  return function(pathname: string) {\n    const m = re.exec(pathname);\n    if (!m) return false;\n\n    const { 0: path, index } = m;\n    const params = Object.create(null);\n\n    for (let i = 1; i < m.length; i++) {\n      // tslint:disable-next-line\n      if (m[i] === undefined) continue;\n\n      const key = keys[i - 1];\n\n      if (key.modifier === \"*\" || key.modifier === \"+\") {\n        params[key.name] = m[i].split(key.prefix + key.suffix).map(value => {\n          return decode(value, key);\n        });\n      } else {\n        params[key.name] = decode(m[i], key);\n      }\n    }\n\n    return { path, index, params };\n  };\n}\n\n/**\n * Escape a regular expression string.\n */\nfunction escapeString(str: string) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\n}\n\n/**\n * Get the flags for a regexp from the options.\n */\nfunction flags(options?: { sensitive?: boolean }) {\n  return options && options.sensitive ? \"\" : \"i\";\n}\n\n/**\n * Metadata about a key.\n */\nexport interface Key {\n  name: string | number;\n  prefix: string;\n  suffix: string;\n  pattern: string;\n  modifier: string;\n}\n\n/**\n * A token is a string (nothing special) or key metadata (capture group).\n */\nexport type Token = string | Key;\n\n/**\n * Pull out keys from a regexp.\n */\nfunction regexpToRegexp(path: RegExp, keys?: Key[]): RegExp {\n  if (!keys) return path;\n\n  const groupsRegex = /\\((?:\\?<(.*?)>)?(?!\\?)/g;\n\n  let index = 0;\n  let execResult = groupsRegex.exec(path.source);\n  while (execResult) {\n    keys.push({\n      // Use parenthesized substring match if available, index otherwise\n      name: execResult[1] || index++,\n      prefix: \"\",\n      suffix: \"\",\n      modifier: \"\",\n      pattern: \"\"\n    });\n    execResult = groupsRegex.exec(path.source);\n  }\n\n  return path;\n}\n\n/**\n * Transform an array into a regexp.\n */\nfunction arrayToRegexp(\n  paths: Array<string | RegExp>,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions\n): RegExp {\n  const parts = paths.map(path => pathToRegexp(path, keys, options).source);\n  return new RegExp(`(?:${parts.join(\"|\")})`, flags(options));\n}\n\n/**\n * Create a path regexp from string input.\n */\nfunction stringToRegexp(\n  path: string,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions\n) {\n  return tokensToRegexp(parse(path, options), keys, options);\n}\n\nexport interface TokensToRegexpOptions {\n  /**\n   * When `true` the regexp will be case sensitive. (default: `false`)\n   */\n  sensitive?: boolean;\n  /**\n   * When `true` the regexp won't allow an optional trailing delimiter to match. (default: `false`)\n   */\n  strict?: boolean;\n  /**\n   * When `true` the regexp will match to the end of the string. (default: `true`)\n   */\n  end?: boolean;\n  /**\n   * When `true` the regexp will match from the beginning of the string. (default: `true`)\n   */\n  start?: boolean;\n  /**\n   * Sets the final character for non-ending optimistic matches. (default: `/`)\n   */\n  delimiter?: string;\n  /**\n   * List of characters that can also be \"end\" characters.\n   */\n  endsWith?: string;\n  /**\n   * Encode path tokens for use in the `RegExp`.\n   */\n  encode?: (value: string) => string;\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n */\nexport function tokensToRegexp(\n  tokens: Token[],\n  keys?: Key[],\n  options: TokensToRegexpOptions = {}\n) {\n  const {\n    strict = false,\n    start = true,\n    end = true,\n    encode = (x: string) => x\n  } = options;\n  const endsWith = `[${escapeString(options.endsWith || \"\")}]|$`;\n  const delimiter = `[${escapeString(options.delimiter || \"/#?\")}]`;\n  let route = start ? \"^\" : \"\";\n\n  // Iterate over the tokens and create our regexp string.\n  for (const token of tokens) {\n    if (typeof token === \"string\") {\n      route += escapeString(encode(token));\n    } else {\n      const prefix = escapeString(encode(token.prefix));\n      const suffix = escapeString(encode(token.suffix));\n\n      if (token.pattern) {\n        if (keys) keys.push(token);\n\n        if (prefix || suffix) {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            const mod = token.modifier === \"*\" ? \"?\" : \"\";\n            route += `(?:${prefix}((?:${token.pattern})(?:${suffix}${prefix}(?:${token.pattern}))*)${suffix})${mod}`;\n          } else {\n            route += `(?:${prefix}(${token.pattern})${suffix})${token.modifier}`;\n          }\n        } else {\n          route += `(${token.pattern})${token.modifier}`;\n        }\n      } else {\n        route += `(?:${prefix}${suffix})${token.modifier}`;\n      }\n    }\n  }\n\n  if (end) {\n    if (!strict) route += `${delimiter}?`;\n\n    route += !options.endsWith ? \"$\" : `(?=${endsWith})`;\n  } else {\n    const endToken = tokens[tokens.length - 1];\n    const isEndDelimited =\n      typeof endToken === \"string\"\n        ? delimiter.indexOf(endToken[endToken.length - 1]) > -1\n        : // tslint:disable-next-line\n          endToken === undefined;\n\n    if (!strict) {\n      route += `(?:${delimiter}(?=${endsWith}))?`;\n    }\n\n    if (!isEndDelimited) {\n      route += `(?=${delimiter}|${endsWith})`;\n    }\n  }\n\n  return new RegExp(route, flags(options));\n}\n\n/**\n * Supported `path-to-regexp` input types.\n */\nexport type Path = string | RegExp | Array<string | RegExp>;\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n */\nexport function pathToRegexp(\n  path: Path,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions\n) {\n  if (path instanceof RegExp) return regexpToRegexp(path, keys);\n  if (Array.isArray(path)) return arrayToRegexp(path, keys, options);\n  return stringToRegexp(path, keys, options);\n}\n","import React from 'react';\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { pathToRegexp, compile } from 'path-to-regexp';\r\nimport AppLangs from 'config/AppLangs';\r\n\r\nconst Navbar: React.FC = () => {\r\n  const { t } = useTranslation();\r\n  return (\r\n    <nav className='navbar'>\r\n      <Link to={`/${t('lang')}`}>{t('home.menu')}</Link>\r\n      <Link to={`/${t('lang')}/projects`}>{t('projects.menu')}</Link>\r\n      <LangSelector />\r\n    </nav>\r\n  );\r\n};\r\n\r\nconst LangSelector: React.FC = () => {\r\n  const location = useLocation();\r\n\r\n  return (\r\n    <div className='lang-selector'>\r\n      {Object.entries(AppLangs).map(([key, value], index) => {\r\n        return (\r\n          <Link key={index} to={langUrl(key, location.pathname)}>\r\n            {value}\r\n          </Link>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst langUrl = (locale: string, path: string) => {\r\n  const ROUTE = '/:locale/:path*';\r\n  const definePath = compile(ROUTE);\r\n  const routeComponents = pathToRegexp(ROUTE).exec(path);\r\n\r\n  let subPaths = null;\r\n  if (routeComponents && routeComponents[2]) {\r\n    subPaths = routeComponents[2].split('/');\r\n  }\r\n\r\n  return definePath({\r\n    locale,\r\n    path: subPaths,\r\n  });\r\n};\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Navbar from './Navbar';\r\n\r\nimport Logo from 'assets/img/BarbosaCap_Logo.svg';\r\n\r\nconst Header: React.FC = () => {\r\n  return (\r\n    <header>\r\n      <Link to='/' className='brand'>\r\n        <img src={Logo} alt='BarbosaCap Logo' />\r\n      </Link>\r\n      <Navbar />\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nconst Footer: React.FC = () => {\r\n  const { t } = useTranslation();\r\n  return (\r\n    <footer>\r\n      {t('share')}\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React, { Fragment } from 'react';\r\nimport Header from './modules/Header';\r\nimport Footer from './modules/Footer';\r\n\r\ninterface IAppLayout extends React.FC<{ className?: string }> {}\r\n\r\nexport const AppLayout: IAppLayout = ({ children, className }) => (\r\n  <Fragment>\r\n    <Header />\r\n    <main className={className}>{children}</main>\r\n    <Footer />\r\n  </Fragment>\r\n);\r\n","import React from 'react';\r\n\r\nimport { AppLayout } from 'components/Layouts/AppLayout';\r\n\r\nimport './NotFound.scss';\r\n\r\nconst NotFound: React.FC = () => (\r\n  <AppLayout className='NotFound'>\r\n    <h1>PageNotFound Component</h1>\r\n  </AppLayout>\r\n);\r\n\r\nexport default NotFound;\r\n"],"sourceRoot":""}