{"version":3,"sources":["config/AppLangs.ts","config/i18n.ts","config/Routes.ts","App.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["defaultLang","AppLangs","en","es","i18n","use","Backend","initReactI18next","LanguageDetector","init","lng","supportedLngs","Object","keys","backend","loadPath","fallbackLng","debug","ns","defaultNS","keySeparator","interpolation","escapeValue","formatSeparator","react","wait","Home","lazy","Projects","ProjectsFGC","NotFound","App","props","useTranslation","params","useParams","useEffect","changeLanguage","locale","htmlAttributes","lang","process","name","content","to","id","path","Component","map","match","url","component","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","ReactDOM","render","StrictMode","fallback","I18nextProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yGAAA,kCAAO,IAAMA,EAAc,KAMZC,IAJ6B,CAC1CC,GAAI,UACJC,GAAI,e,wKCGNC,IACGC,IAAIC,KACJD,IAAIE,KACJF,IAAIG,KACJC,KAAK,CACJC,IAAK,KACLC,cAAeC,OAAOC,KAAKZ,KAC3Ba,QAAS,CAEPC,SAAU,+BAEZC,YAAa,KACbC,OAAO,EAEPC,GAAI,CAAC,gBACLC,UAAW,eACXC,cAAc,EACdC,cAAe,CACbC,aAAa,EACbC,gBAAiB,KAEnBC,MAAO,CACLC,MAAM,KAIGrB,QAAf,E,QC/BMsB,EAAOC,gBAAK,kBAAM,sDAClBC,EAAWD,gBAAK,kBAAM,sDACtBE,EAAcF,gBAAK,kBAAM,sDAClBG,EAAWH,gBAAK,kBAAM,sD,OCkCpBI,EA1B4B,SAACC,GAAW,IAAD,EAC5C5B,EAAS6B,cAAT7B,KACF8B,EAAkBC,cAOxB,OALAC,qBAAU,WAAO,IAAD,EACdhC,EAAKiC,eAAL,UAAoBH,EAAOI,cAA3B,QAAqCtC,OAEpC,CAACkC,EAAOI,SAGT,qCACE,eAAC,IAAD,CAAQC,eAAgB,CAAEC,KAAI,UAAEN,EAAOI,cAAT,QAAmBtC,KAAjD,UACE,gCAAQyC,eACR,sBAAMC,KAAK,cAAcC,QAASF,qDAEpC,eAAC,IAAD,WACGP,EAAOI,UAAUrC,IAAW,GAAK,cAAC,IAAD,CAAU2C,GAAE,WAAM5C,IAAc,IAAMkC,EAAOI,UDrB9E,CACL,CACEO,GAAI,OACJC,KAAM,IACNC,UAAWrB,GAEb,CACEmB,GAAI,WACJC,KAAM,YACNC,UAAWnB,GAEb,CACEiB,GAAI,cACJC,KAAM,kCACNC,UAAWlB,ICQCmB,KAAI,gBAAGH,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAb,OACZ,cAAC,IAAD,CAAgBD,KAAI,UAAKd,EAAMiB,MAAMC,KAAjB,OAAuBJ,GAAQK,UAAWJ,EAAWK,OAAK,GAAlEP,MAEd,cAAC,IAAD,CAAOM,UAAWrB,WCnBXuB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCGMQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAShB,MAAM,2D,MCDnCiB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,WAAD,CAAUC,SAAU,KAApB,SACE,cAACC,EAAA,EAAD,CAAiBlE,KAAMA,EAAvB,SACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO0C,KAAK,WAAWK,UAAWpB,IAClC,cAAC,IAAD,CAAUa,GAAE,WAAM5C,oBAO9BuE,SAASC,eAAe,SDqGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAACoB,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YChG5B5B,M","file":"static/js/main.429672e7.chunk.js","sourcesContent":["export const defaultLang = 'en';\r\n\r\nconst AppLangs: { [key: string]: string } = {\r\n  en: 'English',\r\n  es: 'EspaÃ±ol',\r\n};\r\nexport default AppLangs;\r\n","import i18n from 'i18next';\r\nimport LanguageDetector from \"i18next-browser-languagedetector\";\r\nimport Backend from 'i18next-xhr-backend';\r\nimport { initReactI18next } from 'react-i18next';\r\n\r\nimport AppLangs from './AppLangs';\r\n\r\ni18n\r\n  .use(Backend)\r\n  .use(initReactI18next)\r\n  .use(LanguageDetector)\r\n  .init({\r\n    lng: 'en',\r\n    supportedLngs: Object.keys(AppLangs),\r\n    backend: {\r\n      /* translation file path */\r\n      loadPath: '/assets/{{ns}}/{{lng}}.json',\r\n    },\r\n    fallbackLng: 'en',\r\n    debug: false,\r\n    /* can have multiple namespace, in case you want to divide a huge translation into smaller pieces and load them on demand */\r\n    ns: ['translations'],\r\n    defaultNS: 'translations',\r\n    keySeparator: false,\r\n    interpolation: {\r\n      escapeValue: false,\r\n      formatSeparator: ',',\r\n    },\r\n    react: {\r\n      wait: true,\r\n    },\r\n  });\r\n\r\nexport default i18n;\r\n","import { lazy } from 'react';\r\n\r\nconst Home = lazy(() => import('pages/Home'));\r\nconst Projects = lazy(() => import('pages/Projects'));\r\nconst ProjectsFGC = lazy(() => import('pages/Projects/pages/FixedGearCalculator'));\r\nexport const NotFound = lazy(() => import('pages/NotFound'));\r\n\r\nexport const Routes = () => {\r\n  return [\r\n    {\r\n      id: 'home',\r\n      path: '/',\r\n      Component: Home,\r\n    },\r\n    {\r\n      id: 'projects',\r\n      path: '/projects',\r\n      Component: Projects,\r\n    },\r\n    {\r\n      id: 'projectsFGC',\r\n      path: '/projects/fixed-gear-calculator',\r\n      Component: ProjectsFGC,\r\n    },\r\n  ];\r\n};\r\n","import React, { useEffect } from 'react';\r\n\r\nimport { Helmet } from 'react-helmet-async';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Redirect, Route, RouteComponentProps, Switch, useParams } from 'react-router-dom';\r\n\r\nimport AppLangs, { defaultLang } from 'config/AppLangs';\r\nimport { NotFound, Routes } from 'config/Routes';\r\n\r\ninterface IParams {\r\n  locale: string;\r\n}\r\n\r\nconst App: React.FC<RouteComponentProps> = (props) => {\r\n  const { i18n } = useTranslation();\r\n  const params: IParams = useParams();\r\n\r\n  useEffect(() => {\r\n    i18n.changeLanguage(params.locale ?? defaultLang);\r\n    // eslint-disable-next-line\r\n  }, [params.locale]);\r\n\r\n  return (\r\n    <>\r\n      <Helmet htmlAttributes={{ lang: params.locale ?? defaultLang }}>\r\n        <title>{process.env.REACT_APP_SITE_TITLE}</title>\r\n        <meta name=\"description\" content={process.env.REACT_APP_SITE_DESC}></meta>\r\n      </Helmet>\r\n      <Switch>\r\n        {params.locale in AppLangs ? '' : <Redirect to={`/${defaultLang + '/' + params.locale}`} />}\r\n        {Routes().map(({ id, path, Component }) => (\r\n          <Route key={id} path={`${props.match.url}${path}`} component={Component} exact />\r\n        ))}\r\n        <Route component={NotFound} />\r\n      </Switch>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, { Suspense } from 'react';\r\n\r\nimport ReactDOM from 'react-dom';\r\nimport { HelmetProvider } from 'react-helmet-async';\r\nimport { I18nextProvider } from 'react-i18next';\r\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\r\n\r\nimport { defaultLang } from 'config/AppLangs';\r\nimport i18n from 'config/i18n';\r\n\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport './index.scss';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HelmetProvider>\r\n      <Suspense fallback={null}>\r\n        <I18nextProvider i18n={i18n}>\r\n          <Router>\r\n            <Switch>\r\n              <Route path=\"/:locale\" component={App} />\r\n              <Redirect to={`/${defaultLang}`} />\r\n            </Switch>\r\n          </Router>\r\n        </I18nextProvider>\r\n      </Suspense>\r\n    </HelmetProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}