{"version":3,"sources":["config/AppLangs.ts","config/i18n.ts","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["AppLangs","i18n","use","Backend","initReactI18next","LanguageDetector","init","lng","supportedLngs","Object","keys","backend","loadPath","fallbackLng","debug","ns","defaultNS","keySeparator","interpolation","escapeValue","formatSeparator","react","wait","Home","React","lazy","Projects","NotFound","App","props","useTranslation","params","useParams","useEffect","changeLanguage","locale","to","path","match","url","exact","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","fallback","I18nextProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yGAIeA,IAJ2B,CACtC,GAAM,UACN,GAAM,e,mMCIVC,IACGC,IAAIC,KACJD,IAAIE,KACJF,IAAIG,KACJC,KAAK,CACJC,IAAK,KACLC,cAAeC,OAAOC,KAAKV,KAC3BW,QAAS,CAEPC,SAAU,+BAEZC,YAAa,KACbC,OAAO,EAEPC,GAAI,CAAC,gBACLC,UAAW,eACXC,cAAc,EACdC,cAAe,CACbC,aAAa,EACbC,gBAAiB,KAEnBC,MAAO,CACLC,MAAM,KAIGrB,QAAf,E,gBCnBMsB,EAAOC,IAAMC,MAAK,kBAAM,gCACxBC,EAAWF,IAAMC,MAAK,kBAAM,gCAC5BE,EAAWH,IAAMC,MAAK,kBAAM,gCA0BnBG,EApB4B,SAACC,GAAW,IAC7C5B,EAAS6B,cAAT7B,KACF8B,EAAkBC,cAOxB,OALAC,qBAAU,WAAO,IAAD,EACdhC,EAAKiC,eAAL,UAAoBH,EAAOI,cAA3B,QAAqC,QAEpC,CAACJ,EAAOI,SAGT,kBAAC,IAAD,KACGJ,EAAOI,UAAUnC,IAAW,GAAK,kBAAC,IAAD,CAAUoC,GAAG,QAE/C,kBAAC,IAAD,CAAOC,KAAI,UAAKR,EAAMS,MAAMC,IAAjB,KAAyBC,OAAK,EAACC,UAAWlB,IACrD,kBAAC,IAAD,CAAOc,KAAI,UAAKR,EAAMS,MAAMC,IAAjB,aAAiCC,OAAK,EAACC,UAAWf,IAC7D,kBAAC,IAAD,CAAOe,UAAWd,MCxBJe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASP,MACvB,2DCNNQ,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,WAAD,CAAUC,SAAU,MAClB,kBAACC,EAAA,EAAD,CAAiBjD,KAAMA,GACrB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOoC,KAAK,WAAWI,UAAWb,IAClC,kBAAC,IAAD,CAAUQ,GAAG,aAMvBe,SAASC,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9ffeaa15.chunk.js","sourcesContent":["const AppLangs: {[key: string]: string} = {\r\n    'en': 'English',\r\n    'es': 'EspaÃ±ol'\r\n}\r\nexport default AppLangs;","import i18n from 'i18next';\r\nimport { initReactI18next } from 'react-i18next';\r\nimport Backend from 'i18next-xhr-backend';\r\nimport LanguageDetector from \"i18next-browser-languagedetector\";\r\nimport AppLangs from './AppLangs';\r\n\r\ni18n\r\n  .use(Backend)\r\n  .use(initReactI18next)\r\n  .use(LanguageDetector)\r\n  .init({\r\n    lng: 'en',\r\n    supportedLngs: Object.keys(AppLangs),\r\n    backend: {\r\n      /* translation file path */\r\n      loadPath: '/assets/{{ns}}/{{lng}}.json',\r\n    },\r\n    fallbackLng: 'en',\r\n    debug: false,\r\n    /* can have multiple namespace, in case you want to divide a huge translation into smaller pieces and load them on demand */\r\n    ns: ['translations'],\r\n    defaultNS: 'translations',\r\n    keySeparator: false,\r\n    interpolation: {\r\n      escapeValue: false,\r\n      formatSeparator: ',',\r\n    },\r\n    react: {\r\n      wait: true,\r\n    },\r\n  });\r\n\r\nexport default i18n;\r\n","import React, { useEffect } from 'react';\r\nimport {\r\n  Route,\r\n  Switch,\r\n  Redirect,\r\n  RouteComponentProps,\r\n  useParams,\r\n} from 'react-router-dom';\r\nimport { useTranslation } from 'react-i18next';\r\nimport AppLangs from 'config/AppLangs';\r\n\r\n// Components\r\n// import Home from './Home';\r\nconst Home = React.lazy(() => import('./Home'));\r\nconst Projects = React.lazy(() => import('./Projects'));\r\nconst NotFound = React.lazy(() => import('./NotFound'));\r\n\r\ninterface IParams {\r\n  locale: string;\r\n}\r\n\r\nconst App: React.FC<RouteComponentProps> = (props) => {\r\n  const { i18n } = useTranslation();\r\n  const params: IParams = useParams();\r\n\r\n  useEffect(() => {\r\n    i18n.changeLanguage(params.locale ?? 'en');\r\n    // eslint-disable-next-line\r\n  }, [params.locale]);\r\n\r\n  return (\r\n    <Switch>\r\n      {params.locale in AppLangs ? '' : <Redirect to='/en' />}\r\n\r\n      <Route path={`${props.match.url}/`} exact component={Home} />\r\n      <Route path={`${props.match.url}/projects`} exact component={Projects} />\r\n      <Route component={NotFound} />\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, { Suspense } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\r\nimport { I18nextProvider } from 'react-i18next';\r\nimport i18n from './config/i18n';\r\n\r\nimport './index.scss';\r\n\r\nimport App from './components/App';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Suspense fallback={null}>\r\n      <I18nextProvider i18n={i18n}>\r\n        <BrowserRouter>\r\n          <Switch>\r\n            <Route path='/:locale' component={App} />\r\n            <Redirect to='/en' />\r\n          </Switch>\r\n        </BrowserRouter>\r\n      </I18nextProvider>\r\n    </Suspense>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}