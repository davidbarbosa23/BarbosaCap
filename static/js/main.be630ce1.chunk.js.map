{"version":3,"sources":["config/AppLangs.ts","contexts/currentPath.tsx","config/i18n.ts","config/Routes.ts","App.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["defaultLang","AppLangs","en","es","CurrentPath","createContext","CurrentPathProvider","path","children","useState","currentPath","setCurrentPath","useEffect","Provider","value","useCurrentPath","useContext","i18n","use","Backend","initReactI18next","LanguageDetector","init","lng","supportedLngs","Object","keys","backend","loadPath","fallbackLng","debug","ns","defaultNS","keySeparator","interpolation","escapeValue","formatSeparator","react","wait","Home","lazy","Projects","ProjectsFGC","NotFound","Routes","all","id","Component","map","route","App","props","useTranslation","locale","useParams","changeLanguage","htmlAttributes","lang","process","name","content","to","match","url","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","ReactDOM","render","StrictMode","fallback","I18nextProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.be630ce1.chunk.js","sourcesContent":["export const defaultLang = 'en';\n\nconst AppLangs: { [key: string]: string } = {\n  en: 'English',\n  es: 'EspaÃ±ol',\n};\nexport default AppLangs;\n","import { createContext, useContext, useEffect, useState, ReactNode } from 'react';\n\ntype Path = {\n  id: string;\n  path: {\n    en: string;\n    es: string;\n  };\n  lang: string;\n};\n\nconst CurrentPath = createContext({});\n\nexport const CurrentPathProvider = ({ path, children }: { path: Path; children: ReactNode }) => {\n  const [currentPath, setCurrentPath] = useState<Path>(path);\n\n  useEffect(() => setCurrentPath(path), [path]);\n\n  return <CurrentPath.Provider value={currentPath}>{children}</CurrentPath.Provider>;\n};\n\nexport const useCurrentPath = () => useContext(CurrentPath);\n","import i18n from 'i18next';\nimport LanguageDetector from \"i18next-browser-languagedetector\";\nimport Backend from 'i18next-xhr-backend';\nimport { initReactI18next } from 'react-i18next';\n\nimport AppLangs from './AppLangs';\n\ni18n\n  .use(Backend)\n  .use(initReactI18next)\n  .use(LanguageDetector)\n  .init({\n    lng: 'en',\n    supportedLngs: Object.keys(AppLangs),\n    backend: {\n      /* translation file path */\n      loadPath: '/assets/{{ns}}/{{lng}}.json',\n    },\n    fallbackLng: 'en',\n    debug: false,\n    /* can have multiple namespace, in case you want to divide a huge translation into smaller pieces and load them on demand */\n    ns: ['translations'],\n    defaultNS: 'translations',\n    keySeparator: false,\n    interpolation: {\n      escapeValue: false,\n      formatSeparator: ',',\n    },\n    react: {\n      wait: true,\n    },\n  });\n\nexport default i18n;\n","import { lazy } from 'react';\n\nconst Home = lazy(() => import('pages/Home'));\nconst Projects = lazy(() => import('pages/Projects'));\nconst ProjectsFGC = lazy(() => import('pages/Projects/pages/FixedGearCalculator'));\nexport const NotFound = lazy(() => import('pages/NotFound'));\n\nexport const Routes = (\n  all: Boolean = true\n): Array<{ id: string; path: { [key: string]: string }; Component?: any }> =>\n  [\n    {\n      id: 'home',\n      path: {\n        en: '/',\n        es: '/',\n      },\n      Component: Home,\n    },\n    {\n      id: 'projects',\n      path: {\n        en: '/projects',\n        es: '/proyectos',\n      },\n      Component: Projects,\n    },\n    {\n      id: 'projectsFGC',\n      path: {\n        en: '/projects/fixed-gear-calculator',\n        es: '/proyectos/calculadora-fixed-gear',\n      },\n      Component: ProjectsFGC,\n    },\n  ].map((route) => (all ? route : { id: route.id, path: route.path }));\n","import React, { useEffect } from 'react';\n\nimport { Helmet } from 'react-helmet-async';\nimport { useTranslation } from 'react-i18next';\nimport { Redirect, Route, RouteComponentProps, Switch, useParams } from 'react-router-dom';\n\nimport AppLangs, { defaultLang } from 'config/AppLangs';\nimport { NotFound, Routes } from 'config/Routes';\n\nimport { CurrentPathProvider } from 'contexts/currentPath';\n\ninterface IParams {\n  locale: 'en' | 'es';\n}\n\nconst App: React.FC<RouteComponentProps> = (props) => {\n  const { i18n } = useTranslation();\n  const { locale }: IParams = useParams();\n\n  useEffect(() => {\n    i18n.changeLanguage(locale ?? defaultLang);\n    // eslint-disable-next-line\n  }, [locale]);\n\n  return (\n    <>\n      <Helmet htmlAttributes={{ lang: locale ?? defaultLang }}>\n        <title>{process.env.REACT_APP_SITE_TITLE}</title>\n        <meta name=\"description\" content={process.env.REACT_APP_SITE_DESC}></meta>\n      </Helmet>\n      <Switch>\n        {locale in AppLangs ? '' : <Redirect to={`/${defaultLang + '/' + locale}`} />}\n        {Routes(true).map(({ id, path, Component }: any) => (\n          <Route\n            key={id}\n            path={`${props.match.url}${locale in path ? path[locale] : path.en}`}\n            exact\n          >\n            <CurrentPathProvider path={{ id, path, lang: locale }}>\n              <Component />\n            </CurrentPathProvider>\n          </Route>\n        ))}\n        <Route component={NotFound} />\n      </Switch>\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Suspense } from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { HelmetProvider } from 'react-helmet-async';\nimport { I18nextProvider } from 'react-i18next';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\n\nimport { defaultLang } from 'config/AppLangs';\nimport i18n from 'config/i18n';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HelmetProvider>\n      <Suspense fallback={null}>\n        <I18nextProvider i18n={i18n}>\n          <Router>\n            <Switch>\n              <Route path=\"/:locale\" component={App} />\n              <Redirect to={`/${defaultLang}`} />\n            </Switch>\n          </Router>\n        </I18nextProvider>\n      </Suspense>\n    </HelmetProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}